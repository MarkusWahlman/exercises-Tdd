{"version":3,"file":"index-PATO-FN7.js","sources":["../../src/Tetromino.js","../../src/FallingTetromino.js","../../src/Board.js","../../src/ScoringSystem.js","../../src/ShuffleBag.js","../../src/index.ts"],"sourcesContent":["export class Tetromino {\n    rotationStates = [];\n    rotationIndex;\n    static get I_SHAPE() {\n        return new ITetromino();\n    }\n    static get T_SHAPE() {\n        return new TTetromino();\n    }\n    static get L_SHAPE() {\n        return new LTetromino();\n    }\n    static get J_SHAPE() {\n        return new JTetromino();\n    }\n    static get S_SHAPE() {\n        return new STetromino();\n    }\n    static get Z_SHAPE() {\n        return new ZTetromino();\n    }\n    static get O_SHAPE() {\n        return new OTetromino();\n    }\n    grid;\n    constructor(grid, rotationIndex = 0) {\n        this.grid = grid;\n        this.rotationIndex = rotationIndex;\n        if (this.constructor.rotationStates) {\n            this.rotationStates = this.constructor.rotationStates;\n        }\n    }\n    static fromString(shape) {\n        const grid = shape\n            .trim()\n            .split(\"\\n\")\n            .map((row) => row.trim().split(\"\"));\n        return new Tetromino(grid);\n    }\n    toString() {\n        return this.grid.map((row) => row.join(\"\")).join(\"\\n\") + \"\\n\";\n    }\n    rotateRight() {\n        const newRotationIndex = (this.rotationIndex + 1) % this.constructor.rotationStates.length;\n        return new this.constructor(newRotationIndex);\n    }\n    rotateLeft() {\n        const newRotationIndex = (this.rotationIndex + this.constructor.rotationStates.length - 1) %\n            this.constructor.rotationStates.length;\n        return new this.constructor(newRotationIndex);\n    }\n}\nexport class ITetromino extends Tetromino {\n    static rotationStates = [\n        `.....\n     IIII.\n     .....\n     .....\n     .....`,\n        `...I.\n     ...I.\n     ...I.\n     ...I.\n     .....`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(ITetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class TTetromino extends Tetromino {\n    static rotationStates = [\n        `...\n     TTT\n     .T.`,\n        `.T.\n     TT.\n     .T.`,\n        `...\n     .T.\n     TTT`,\n        `.T.\n     .TT\n     .T.`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(TTetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class LTetromino extends Tetromino {\n    static rotationStates = [\n        `...\n     LLL\n     L..`,\n        `LL.\n     .L.\n     .L.`,\n        `...\n     ..L\n     LLL`,\n        `.L.\n     .L.\n     .LL`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(LTetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class JTetromino extends Tetromino {\n    static rotationStates = [\n        `...\n     JJJ\n     ..J`,\n        `.J.\n     .J.\n     JJ.`,\n        `...\n     J..\n     JJJ`,\n        `.JJ\n     .J.\n     .J.`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(JTetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class STetromino extends Tetromino {\n    static rotationStates = [\n        `...\n     .SS\n     SS.`,\n        `S..\n     SS.\n     .S..`,\n        `...\n     .SS\n     SS.`,\n        `S..\n     SS.\n     .S.`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(STetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class ZTetromino extends Tetromino {\n    static rotationStates = [\n        `...\n     ZZ.\n     .ZZ`,\n        `..Z\n     .ZZ\n     .Z.`,\n        `...\n     ZZ.\n     .ZZ`,\n        `.Z.\n     ZZ.\n     Z..`,\n    ];\n    constructor(rotationIndex = 0) {\n        super(Tetromino.fromString(ZTetromino.rotationStates[rotationIndex]).grid, rotationIndex);\n    }\n}\nexport class OTetromino extends Tetromino {\n    constructor() {\n        super(Tetromino.fromString(`...\n         .OO\n         .OO`).grid);\n    }\n    rotateRight() {\n        return this;\n    }\n    rotateLeft() {\n        return this;\n    }\n}\n","import { Tetromino } from \"./Tetromino.js\";\nexport class FallingTetromino {\n    board;\n    columnPos;\n    rowPos;\n    tetromino;\n    isFalling;\n    constructor(board, tetromino) {\n        this.board = board;\n        this.isFalling = true;\n        this.tetromino = tetromino instanceof Tetromino ? tetromino : Tetromino.fromString(tetromino);\n        const maxWidth = this.tetromino.grid[0].length;\n        this.rowPos = Math.floor((board.width - maxWidth) / 2);\n        this.columnPos = 0;\n        for (let y = 0; y < this.tetromino.grid.length; y++) {\n            for (let x = 0; x < this.tetromino.grid[y].length; x++) {\n                this.board.grid[this.columnPos + y][this.rowPos + x] = this.tetromino.grid[y][x];\n            }\n        }\n    }\n    reDraw(newTetromino) {\n        const oldTetromino = this.tetromino;\n        const commonPositions = [];\n        for (let y = 0; y < oldTetromino.grid.length; y++) {\n            for (let x = 0; x < oldTetromino.grid[y].length; x++) {\n                if (newTetromino.grid[y][x] !== \".\" && oldTetromino.grid[y][x] !== \".\") {\n                    commonPositions.push([y, x]);\n                }\n            }\n        }\n        this.tetromino = newTetromino;\n        if (!this.canBeMoved(0, 0, commonPositions)) {\n            this.tetromino = oldTetromino;\n            return false;\n        }\n        this.drawNewTetromino(0, 0, oldTetromino);\n        return true;\n    }\n    canBeMoved(deltaColumn, deltaRow, ignoreList = []) {\n        // Go through all of the blocks and check if we can move them\n        let canMove = true;\n        const newColumnPos = this.columnPos + deltaColumn;\n        const newRowPos = this.rowPos + deltaRow;\n        const rowDirection = deltaRow === 0 ? 1 : Math.sign(deltaRow);\n        for (let y = 0; y < this.tetromino.grid.length; y++) {\n            for (let x = 0; x < this.tetromino.grid[y].length; x++) {\n                if (ignoreList.some(([cy, cx]) => cy === y && cx === x)) {\n                    continue;\n                }\n                const curBlock = this.tetromino.grid[y][x];\n                if (curBlock === \".\") {\n                    continue;\n                }\n                if (newColumnPos + y >= this.board.height) {\n                    canMove = false;\n                    break;\n                }\n                if (newRowPos + x >= this.board.width || newRowPos + x < 0) {\n                    canMove = false;\n                    break;\n                }\n                if (deltaColumn !== 0) {\n                    if (y < this.tetromino.grid.length - 1 && this.tetromino.grid[y + 1][x] !== \".\") {\n                        continue;\n                    }\n                }\n                if (deltaRow !== 0) {\n                    if (this.tetromino.grid[y][x + rowDirection] && this.tetromino.grid[y][x + rowDirection] !== \".\") {\n                        continue;\n                    }\n                }\n                if (this.board.grid[newColumnPos + y][newRowPos + x] !== \".\") {\n                    canMove = false;\n                    break;\n                }\n            }\n            if (!canMove) {\n                break;\n            }\n        }\n        if (!canMove) {\n            return false;\n        }\n        return true;\n    }\n    drawNewTetromino(deltaColumn, deltaRow, oldTetromino) {\n        const newColumnPos = this.columnPos + deltaColumn;\n        const newRowPos = this.rowPos + deltaRow;\n        const rowDirection = deltaRow === 0 ? 1 : Math.sign(deltaRow);\n        for (let y = this.tetromino.grid.length - 1; y >= 0; y--) {\n            for (let x2 = 0; x2 < this.tetromino.grid[y].length; x2++) {\n                const x = rowDirection === -1 ? x2 : this.tetromino.grid[y].length - 1 - x2;\n                if (oldTetromino) {\n                    if (oldTetromino.grid[y][x] !== \".\") {\n                        this.board.grid[this.columnPos + y][this.rowPos + x] = \".\";\n                    }\n                }\n                if (this.tetromino.grid[y][x] !== \".\") {\n                    this.board.grid[this.columnPos + y][this.rowPos + x] = \".\";\n                    this.board.grid[newColumnPos + y][newRowPos + x] = this.tetromino.grid[y][x];\n                }\n            }\n        }\n    }\n    moveBy(deltaColumn, deltaRow) {\n        const canMove = this.canBeMoved(deltaColumn, deltaRow);\n        if (!canMove) {\n            return false;\n        }\n        this.drawNewTetromino(deltaColumn, deltaRow);\n        this.columnPos = this.columnPos + deltaColumn;\n        this.rowPos = this.rowPos + deltaRow;\n        return true;\n    }\n    moveDown() {\n        if (!this.isFalling) {\n            return;\n        }\n        if (!this.moveBy(1, 0)) {\n            this.isFalling = false;\n        }\n    }\n    moveLeft() {\n        if (!this.isFalling) {\n            return;\n        }\n        this.moveBy(0, -1);\n    }\n    moveRight() {\n        if (!this.isFalling) {\n            return;\n        }\n        this.moveBy(0, 1);\n    }\n    rotateLeft() {\n        if (!this.isFalling) {\n            return false;\n        }\n        return this.reDraw(this.tetromino.rotateLeft());\n    }\n    rotateRight() {\n        if (!this.isFalling) {\n            return false;\n        }\n        return this.reDraw(this.tetromino.rotateRight());\n    }\n    lockObject() {\n        this.isFalling = false;\n    }\n}\n","import { FallingTetromino } from \"./FallingTetromino.js\";\nexport class Board {\n    width;\n    height;\n    grid;\n    activeObject;\n    onClearLine;\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.grid = Array.from({ length: height }, () => Array(width).fill(\".\"));\n    }\n    cellAt(row, column) {\n        return this.grid[row][column];\n    }\n    drop(object) {\n        if (!this.activeObject || !this.activeObject.isFalling) {\n            this.activeObject = new FallingTetromino(this, object);\n        }\n        else {\n            throw \"already falling\";\n        }\n    }\n    moveLeft() {\n        this.activeObject?.moveLeft();\n    }\n    moveRight() {\n        this.activeObject?.moveRight();\n    }\n    moveDown() {\n        this.activeObject?.moveDown();\n    }\n    clearFullLines() {\n        let linesCleared = 0;\n        const newGrid = this.grid.filter((row) => row.some((cell) => cell === \".\"));\n        linesCleared = this.grid.length - newGrid.length;\n        if (!linesCleared) {\n            return;\n        }\n        while (newGrid.length < this.grid.length) {\n            newGrid.unshift(new Array(this.grid[0].length).fill(\".\"));\n        }\n        this.grid = newGrid;\n        if (this.onClearLine && linesCleared > 0) {\n            this.onClearLine(linesCleared);\n        }\n    }\n    wallKickRotate(rotateFn) {\n        if (rotateFn()) {\n            return;\n        }\n        if (this.tryMoveAndRotate(0, -1, rotateFn) || this.tryMoveAndRotate(0, 1, rotateFn)) {\n            return;\n        }\n    }\n    tryMoveAndRotate(dx, dy, rotateFn) {\n        if (this.activeObject?.moveBy(dx, dy)) {\n            if (rotateFn()) {\n                return true;\n            }\n            this.activeObject.moveBy(-dx, -dy);\n        }\n        return false;\n    }\n    rotateLeft() {\n        this.wallKickRotate(() => this.activeObject?.rotateLeft());\n    }\n    rotateRight() {\n        this.wallKickRotate(() => this.activeObject?.rotateRight());\n    }\n    tick() {\n        if (this.activeObject && this.activeObject.isFalling) {\n            this.activeObject.moveDown();\n        }\n        else {\n            this.clearFullLines();\n        }\n    }\n    hasFalling() {\n        return this.activeObject?.isFalling;\n    }\n    toString() {\n        return this.grid.map((row) => row.join(\"\")).join(\"\\n\") + \"\\n\";\n    }\n}\n","export class ScoringSystem {\n    score;\n    level;\n    totalLinesCleared;\n    linesCleared(lineCount) {\n        switch (lineCount) {\n            case 1:\n                this.score += 40 * (this.level + 1);\n                break;\n            case 2:\n                this.score += 100 * (this.level + 1);\n                break;\n            case 3:\n                this.score += 300 * (this.level + 1);\n                break;\n            case 4:\n                this.score += 1200 * (this.level + 1);\n                break;\n            default:\n                console.error(`Unexpected line count: ${lineCount}`);\n        }\n        this.totalLinesCleared += lineCount;\n        this.level = Math.min(10, Math.floor(this.totalLinesCleared / 10));\n    }\n    constructor(score = 0, level = 0, totalLinesCleared = 0) {\n        this.score = score;\n        this.level = level;\n        this.totalLinesCleared = totalLinesCleared;\n    }\n}\n","export class ShuffleBag {\n    items;\n    currentBag;\n    index;\n    constructor(items) {\n        this.items = [...items];\n        this.currentBag = [];\n        this.index = 0;\n    }\n    shuffle() {\n        this.currentBag = [...this.items];\n        for (let i = this.currentBag.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.currentBag[i], this.currentBag[j]] = [this.currentBag[j], this.currentBag[i]];\n        }\n        this.index = 0;\n    }\n    next() {\n        if (this.index >= this.currentBag.length) {\n            this.shuffle();\n        }\n        return this.currentBag[this.index++];\n    }\n}\n","import { Board } from \"./Board.js\";\nimport { ScoringSystem } from \"./ScoringSystem.js\";\nimport { ShuffleBag } from \"./ShuffleBag.js\";\nimport { Tetromino } from \"./Tetromino.js\";\n\n// TODO: change this code to match the API you have created, if you want to run the game for some manual testing\n\nclass Game {\n  columns: number;\n  rows: number;\n  tickDuration: number;\n  nextTick: number;\n\n  board: Board;\n  scoring: ScoringSystem;\n  tetrominoes: ShuffleBag<Tetromino>;\n\n  constructor(columns = 10, rows = 20, tickDuration = 1000) {\n    this.columns = columns;\n    this.rows = rows;\n    this.tickDuration = tickDuration;\n    this.nextTick = 0;\n\n    this.scoring = new ScoringSystem();\n    this.board = new Board(this.columns, this.rows);\n    this.tetrominoes = new ShuffleBag([\n      Tetromino.I_SHAPE,\n      Tetromino.T_SHAPE,\n      Tetromino.L_SHAPE,\n      Tetromino.J_SHAPE,\n      Tetromino.S_SHAPE,\n      Tetromino.Z_SHAPE,\n      Tetromino.O_SHAPE,\n    ]);\n\n    this.board.onClearLine = (lineCount) => {\n      this.scoring.linesCleared(lineCount);\n    };\n  }\n}\n\nfunction initGame() {\n  const canvas = document.getElementById(\"game\") as HTMLCanvasElement;\n\n  const game = new Game();\n\n  game.scoring = new ScoringSystem();\n  game.board = new Board(game.columns, game.rows);\n  game.board.onClearLine = (lineCount) => {\n    game.scoring?.linesCleared(lineCount);\n  };\n  game.tetrominoes = new ShuffleBag([\n    Tetromino.I_SHAPE,\n    Tetromino.T_SHAPE,\n    Tetromino.L_SHAPE,\n    Tetromino.J_SHAPE,\n    Tetromino.S_SHAPE,\n    Tetromino.Z_SHAPE,\n    Tetromino.O_SHAPE,\n  ]);\n\n  document.addEventListener(\"keydown\", (event) => {\n    if (event.code === \"Space\") {\n      for (let i = 0; i < game.rows; i++) {\n        game.board.moveDown();\n      }\n    } else if (event.key === \"z\") {\n      game.board.rotateLeft();\n    } else if (event.key === \"x\") {\n      game.board.rotateRight();\n    } else if (event.code === \"ArrowUp\") {\n      game.board.rotateRight();\n    } else if (event.code === \"ArrowDown\") {\n      game.board.moveDown();\n    } else if (event.code === \"ArrowLeft\") {\n      game.board.moveLeft();\n    } else if (event.code === \"ArrowRight\") {\n      game.board.moveRight();\n    } else {\n      return;\n    }\n    event.preventDefault(); // prevent game keys from scrolling the window\n  });\n\n  const render = (timestamp: number) => {\n    progressTime(game, timestamp);\n    renderGame(game, canvas, timestamp);\n    window.requestAnimationFrame(render);\n  };\n  window.requestAnimationFrame(render);\n}\n\n// game logic\n\nfunction progressTime(game: Game, timestamp: number) {\n  if (timestamp >= game.nextTick) {\n    tick(game);\n    adjustDifficulty(game);\n    game.nextTick = timestamp + game.tickDuration;\n  }\n}\n\nfunction tick(game: Game) {\n  if (!game.board.hasFalling()) {\n    game.board.drop(game.tetrominoes.next());\n  } else {\n    game.board.tick();\n  }\n}\n\nfunction adjustDifficulty(game: Game) {\n  const tickDuration = TICK_DURATION_PER_LEVEL[game.scoring.level];\n  if (tickDuration) {\n    game.tickDuration = tickDuration;\n  }\n}\n\nconst TICK_DURATION_PER_LEVEL: { [level: number]: number } = {\n  1: 33 * 15,\n  2: 33 * 13,\n  3: 33 * 11,\n  4: 33 * 9,\n  5: 33 * 7,\n  6: 33 * 5,\n  7: 33 * 4,\n  8: 33 * 3,\n  9: 33 * 2,\n  10: 33,\n};\n\n// rendering\n\nfunction renderGame(game: Game, canvas: HTMLCanvasElement, timestamp: number) {\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    console.error(\"No ctx\");\n    return;\n  }\n  const canvasWidth = (canvas.width = canvas.clientWidth);\n  const canvasHeight = (canvas.height = canvas.clientHeight);\n  const cellWidth = canvasWidth / game.columns;\n  const cellHeight = canvasHeight / game.rows;\n\n  drawBackground(ctx, canvasWidth, canvasHeight);\n  for (let row = 0; row < game.rows; row++) {\n    for (let column = 0; column < game.columns; column++) {\n      const cell = game.board.cellAt(row, column);\n      drawCell(ctx, { cell, row, column, cellWidth, cellHeight });\n    }\n  }\n  drawScoring(ctx, {\n    level: game.scoring.level,\n    score: game.scoring.score,\n    canvasWidth,\n  });\n}\n\nfunction drawBackground(ctx: CanvasRenderingContext2D, canvasWidth: number, canvasHeight: number) {\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n}\n\nfunction drawCell(\n  ctx: CanvasRenderingContext2D,\n  {\n    cell,\n    row,\n    column,\n    cellWidth,\n    cellHeight,\n  }: { cell: string; row: number; column: number; cellWidth: number; cellHeight: number }\n) {\n  ctx.fillStyle = CELL_COLORS[cell];\n  const x = cellWidth * column;\n  const y = cellHeight * row;\n  ctx.fillRect(x, y, cellWidth, cellHeight);\n}\n\nconst CELL_COLORS: { [key: string]: string } = {\n  \".\": \"#ffffff\",\n  I: \"#cc1c19\",\n  T: \"#3a88b2\",\n  L: \"#c85c14\",\n  J: \"#312cc3\",\n  S: \"#921392\",\n  Z: \"#2e9915\",\n  O: \"#9a8016\",\n};\n\nfunction drawScoring(\n  ctx: CanvasRenderingContext2D,\n  { score, level, canvasWidth }: { score: number; level: number; canvasWidth: number }\n) {\n  const margin = 5;\n  const fontSize = 22;\n  drawText(ctx, {\n    text: `Level ${level}`,\n    x: margin,\n    y: fontSize + margin,\n    font: `${fontSize}px sans-serif`,\n  });\n  drawText(ctx, {\n    text: `Score ${score}`,\n    textAlign: \"right\",\n    x: canvasWidth - margin,\n    y: fontSize + margin,\n    font: `${fontSize}px sans-serif`,\n  });\n}\n\nfunction drawText(\n  ctx: CanvasRenderingContext2D,\n  { text, x, y, font, textAlign }: { text: string; x: number; y: number; font: string; textAlign?: CanvasTextAlign }\n) {\n  ctx.font = font;\n  ctx.textAlign = textAlign || \"left\";\n  ctx.fillStyle = \"#000000\";\n  ctx.fillText(text, x, y);\n}\n\ninitGame();\n"],"names":["Tetromino","grid","rotationIndex","__publicField","ITetromino","TTetromino","LTetromino","JTetromino","STetromino","ZTetromino","OTetromino","shape","row","newRotationIndex","_ITetromino","_TTetromino","_LTetromino","_JTetromino","_STetromino","_ZTetromino","FallingTetromino","board","tetromino","maxWidth","y","x","newTetromino","oldTetromino","commonPositions","deltaColumn","deltaRow","ignoreList","canMove","newColumnPos","newRowPos","rowDirection","cy","cx","x2","Board","width","height","column","object","_a","linesCleared","newGrid","cell","rotateFn","dx","dy","ScoringSystem","score","level","totalLinesCleared","lineCount","ShuffleBag","items","i","j","Game","columns","rows","tickDuration","initGame","canvas","game","event","render","timestamp","progressTime","renderGame","tick","adjustDifficulty","TICK_DURATION_PER_LEVEL","ctx","canvasWidth","canvasHeight","cellWidth","cellHeight","drawBackground","drawCell","drawScoring","CELL_COLORS","drawText","text","font","textAlign"],"mappings":"82BAAO,MAAMA,CAAU,CAyBnB,YAAYC,EAAMC,EAAgB,EAAG,CAxBrCC,EAAA,sBAAiB,CAAA,GACjBA,EAAA,sBAsBAA,EAAA,aAEI,KAAK,KAAOF,EACZ,KAAK,cAAgBC,EACjB,KAAK,YAAY,iBACjB,KAAK,eAAiB,KAAK,YAAY,eAE9C,CA5BD,WAAW,SAAU,CACjB,OAAO,IAAIE,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CACD,WAAW,SAAU,CACjB,OAAO,IAAIC,CACd,CASD,OAAO,WAAWC,EAAO,CACrB,MAAMV,EAAOU,EACR,KAAM,EACN,MAAM;AAAA,CAAI,EACV,IAAKC,GAAQA,EAAI,KAAI,EAAG,MAAM,EAAE,CAAC,EACtC,OAAO,IAAIZ,EAAUC,CAAI,CAC5B,CACD,UAAW,CACP,OAAO,KAAK,KAAK,IAAKW,GAAQA,EAAI,KAAK,EAAE,CAAC,EAAE,KAAK;AAAA,CAAI,EAAI;AAAA,CAC5D,CACD,aAAc,CACV,MAAMC,GAAoB,KAAK,cAAgB,GAAK,KAAK,YAAY,eAAe,OACpF,OAAO,IAAI,KAAK,YAAYA,CAAgB,CAC/C,CACD,YAAa,CACT,MAAMA,GAAoB,KAAK,cAAgB,KAAK,YAAY,eAAe,OAAS,GACpF,KAAK,YAAY,eAAe,OACpC,OAAO,IAAI,KAAK,YAAYA,CAAgB,CAC/C,CACL,CACO,MAAMC,EAAN,MAAMA,UAAmBd,CAAU,CAatC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWc,EAAW,eAAeZ,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAfIC,EADSW,EACF,iBAAiB,CACpB;AAAA;AAAA;AAAA;AAAA,YAKA;AAAA;AAAA;AAAA;AAAA,WAKR,GAZO,IAAMV,EAANU,EAiBA,MAAMC,EAAN,MAAMA,UAAmBf,CAAU,CAetC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWe,EAAW,eAAeb,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAjBIC,EADSY,EACF,iBAAiB,CACpB;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,SAGR,GAdO,IAAMV,EAANU,EAmBA,MAAMC,EAAN,MAAMA,UAAmBhB,CAAU,CAetC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWgB,EAAW,eAAed,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAjBIC,EADSa,EACF,iBAAiB,CACpB;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,SAGR,GAdO,IAAMV,EAANU,EAmBA,MAAMC,EAAN,MAAMA,UAAmBjB,CAAU,CAetC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWiB,EAAW,eAAef,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAjBIC,EADSc,EACF,iBAAiB,CACpB;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,SAGR,GAdO,IAAMV,EAANU,EAmBA,MAAMC,EAAN,MAAMA,UAAmBlB,CAAU,CAetC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWkB,EAAW,eAAehB,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAjBIC,EADSe,EACF,iBAAiB,CACpB;AAAA;AAAA,UAGA;AAAA;AAAA,WAGA;AAAA;AAAA,UAGA;AAAA;AAAA,SAGR,GAdO,IAAMV,EAANU,EAmBA,MAAMC,EAAN,MAAMA,UAAmBnB,CAAU,CAetC,YAAYE,EAAgB,EAAG,CAC3B,MAAMF,EAAU,WAAWmB,EAAW,eAAejB,CAAa,CAAC,EAAE,KAAMA,CAAa,CAC3F,CACL,EAjBIC,EADSgB,EACF,iBAAiB,CACpB;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,UAGA;AAAA;AAAA,SAGR,GAdO,IAAMV,EAANU,EAmBA,MAAMT,UAAmBV,CAAU,CACtC,aAAc,CACV,MAAMA,EAAU,WAAW;AAAA;AAAA,aAEtB,EAAE,IAAI,CACd,CACD,aAAc,CACV,OAAO,IACV,CACD,YAAa,CACT,OAAO,IACV,CACL,CC/KO,MAAMoB,CAAiB,CAM1B,YAAYC,EAAOC,EAAW,CAL9BnB,EAAA,cACAA,EAAA,kBACAA,EAAA,eACAA,EAAA,kBACAA,EAAA,kBAEI,KAAK,MAAQkB,EACb,KAAK,UAAY,GACjB,KAAK,UAAYC,aAAqBtB,EAAYsB,EAAYtB,EAAU,WAAWsB,CAAS,EAC5F,MAAMC,EAAW,KAAK,UAAU,KAAK,CAAC,EAAE,OACxC,KAAK,OAAS,KAAK,OAAOF,EAAM,MAAQE,GAAY,CAAC,EACrD,KAAK,UAAY,EACjB,QAASC,EAAI,EAAGA,EAAI,KAAK,UAAU,KAAK,OAAQA,IAC5C,QAASC,EAAI,EAAGA,EAAI,KAAK,UAAU,KAAKD,CAAC,EAAE,OAAQC,IAC/C,KAAK,MAAM,KAAK,KAAK,UAAYD,CAAC,EAAE,KAAK,OAASC,CAAC,EAAI,KAAK,UAAU,KAAKD,CAAC,EAAEC,CAAC,CAG1F,CACD,OAAOC,EAAc,CACjB,MAAMC,EAAe,KAAK,UACpBC,EAAkB,CAAA,EACxB,QAASJ,EAAI,EAAGA,EAAIG,EAAa,KAAK,OAAQH,IAC1C,QAASC,EAAI,EAAGA,EAAIE,EAAa,KAAKH,CAAC,EAAE,OAAQC,IACzCC,EAAa,KAAKF,CAAC,EAAEC,CAAC,IAAM,KAAOE,EAAa,KAAKH,CAAC,EAAEC,CAAC,IAAM,KAC/DG,EAAgB,KAAK,CAACJ,EAAGC,CAAC,CAAC,EAKvC,OADA,KAAK,UAAYC,EACZ,KAAK,WAAW,EAAG,EAAGE,CAAe,GAI1C,KAAK,iBAAiB,EAAG,EAAGD,CAAY,EACjC,KAJH,KAAK,UAAYA,EACV,GAId,CACD,WAAWE,EAAaC,EAAUC,EAAa,CAAA,EAAI,CAE/C,IAAIC,EAAU,GACd,MAAMC,EAAe,KAAK,UAAYJ,EAChCK,EAAY,KAAK,OAASJ,EAC1BK,EAAeL,IAAa,EAAI,EAAI,KAAK,KAAKA,CAAQ,EAC5D,QAASN,EAAI,EAAGA,EAAI,KAAK,UAAU,KAAK,OAAQA,IAAK,CACjD,QAASC,EAAI,EAAGA,EAAI,KAAK,UAAU,KAAKD,CAAC,EAAE,OAAQC,IAK/C,GAJI,EAAAM,EAAW,KAAK,CAAC,CAACK,EAAIC,CAAE,IAAMD,IAAOZ,GAAKa,IAAOZ,CAAC,GAGrC,KAAK,UAAU,KAAKD,CAAC,EAAEC,CAAC,IACxB,KAGjB,IAAIQ,EAAeT,GAAK,KAAK,MAAM,OAAQ,CACvCQ,EAAU,GACV,KACH,CACD,GAAIE,EAAYT,GAAK,KAAK,MAAM,OAASS,EAAYT,EAAI,EAAG,CACxDO,EAAU,GACV,KACH,CACD,GAAI,EAAAH,IAAgB,GACZL,EAAI,KAAK,UAAU,KAAK,OAAS,GAAK,KAAK,UAAU,KAAKA,EAAI,CAAC,EAAEC,CAAC,IAAM,MAI5E,EAAAK,IAAa,GACT,KAAK,UAAU,KAAKN,CAAC,EAAEC,EAAIU,CAAY,GAAK,KAAK,UAAU,KAAKX,CAAC,EAAEC,EAAIU,CAAY,IAAM,MAI7F,KAAK,MAAM,KAAKF,EAAeT,CAAC,EAAEU,EAAYT,CAAC,IAAM,IAAK,CAC1DO,EAAU,GACV,KACH,EAEL,GAAI,CAACA,EACD,KAEP,CACD,MAAK,EAAAA,CAIR,CACD,iBAAiBH,EAAaC,EAAUH,EAAc,CAClD,MAAMM,EAAe,KAAK,UAAYJ,EAChCK,EAAY,KAAK,OAASJ,EAC1BK,EAAeL,IAAa,EAAI,EAAI,KAAK,KAAKA,CAAQ,EAC5D,QAASN,EAAI,KAAK,UAAU,KAAK,OAAS,EAAGA,GAAK,EAAGA,IACjD,QAASc,EAAK,EAAGA,EAAK,KAAK,UAAU,KAAKd,CAAC,EAAE,OAAQc,IAAM,CACvD,MAAMb,EAAIU,IAAiB,GAAKG,EAAK,KAAK,UAAU,KAAKd,CAAC,EAAE,OAAS,EAAIc,EACrEX,GACIA,EAAa,KAAKH,CAAC,EAAEC,CAAC,IAAM,MAC5B,KAAK,MAAM,KAAK,KAAK,UAAYD,CAAC,EAAE,KAAK,OAASC,CAAC,EAAI,KAG3D,KAAK,UAAU,KAAKD,CAAC,EAAEC,CAAC,IAAM,MAC9B,KAAK,MAAM,KAAK,KAAK,UAAYD,CAAC,EAAE,KAAK,OAASC,CAAC,EAAI,IACvD,KAAK,MAAM,KAAKQ,EAAeT,CAAC,EAAEU,EAAYT,CAAC,EAAI,KAAK,UAAU,KAAKD,CAAC,EAAEC,CAAC,EAElF,CAER,CACD,OAAOI,EAAaC,EAAU,CAE1B,OADgB,KAAK,WAAWD,EAAaC,CAAQ,GAIrD,KAAK,iBAAiBD,EAAaC,CAAQ,EAC3C,KAAK,UAAY,KAAK,UAAYD,EAClC,KAAK,OAAS,KAAK,OAASC,EACrB,IALI,EAMd,CACD,UAAW,CACF,KAAK,YAGL,KAAK,OAAO,EAAG,CAAC,IACjB,KAAK,UAAY,IAExB,CACD,UAAW,CACF,KAAK,WAGV,KAAK,OAAO,EAAG,EAAE,CACpB,CACD,WAAY,CACH,KAAK,WAGV,KAAK,OAAO,EAAG,CAAC,CACnB,CACD,YAAa,CACT,OAAK,KAAK,UAGH,KAAK,OAAO,KAAK,UAAU,WAAY,CAAA,EAFnC,EAGd,CACD,aAAc,CACV,OAAK,KAAK,UAGH,KAAK,OAAO,KAAK,UAAU,YAAa,CAAA,EAFpC,EAGd,CACD,YAAa,CACT,KAAK,UAAY,EACpB,CACL,CCpJO,MAAMS,CAAM,CAMf,YAAYC,EAAOC,EAAQ,CAL3BtC,EAAA,cACAA,EAAA,eACAA,EAAA,aACAA,EAAA,qBACAA,EAAA,oBAEI,KAAK,MAAQqC,EACb,KAAK,OAASC,EACd,KAAK,KAAO,MAAM,KAAK,CAAE,OAAQA,GAAU,IAAM,MAAMD,CAAK,EAAE,KAAK,GAAG,CAAC,CAC1E,CACD,OAAO5B,EAAK8B,EAAQ,CAChB,OAAO,KAAK,KAAK9B,CAAG,EAAE8B,CAAM,CAC/B,CACD,KAAKC,EAAQ,CACT,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,aAAa,UACzC,KAAK,aAAe,IAAIvB,EAAiB,KAAMuB,CAAM,MAGrD,MAAM,iBAEb,CACD,UAAW,QACPC,EAAA,KAAK,eAAL,MAAAA,EAAmB,UACtB,CACD,WAAY,QACRA,EAAA,KAAK,eAAL,MAAAA,EAAmB,WACtB,CACD,UAAW,QACPA,EAAA,KAAK,eAAL,MAAAA,EAAmB,UACtB,CACD,gBAAiB,CACb,IAAIC,EAAe,EACnB,MAAMC,EAAU,KAAK,KAAK,OAAQlC,GAAQA,EAAI,KAAMmC,GAASA,IAAS,GAAG,CAAC,EAE1E,GADAF,EAAe,KAAK,KAAK,OAASC,EAAQ,OACtC,EAACD,EAGL,MAAOC,EAAQ,OAAS,KAAK,KAAK,QAC9BA,EAAQ,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,EAE5D,KAAK,KAAOA,EACR,KAAK,aAAeD,EAAe,GACnC,KAAK,YAAYA,CAAY,EAEpC,CACD,eAAeG,EAAU,CACjBA,EAAQ,GAGR,KAAK,iBAAiB,EAAG,GAAIA,CAAQ,GAAK,KAAK,iBAAiB,EAAG,EAAGA,CAAQ,CAGrF,CACD,iBAAiBC,EAAIC,EAAIF,EAAU,OAC/B,IAAIJ,EAAA,KAAK,eAAL,MAAAA,EAAmB,OAAOK,EAAIC,GAAK,CACnC,GAAIF,EAAQ,EACR,MAAO,GAEX,KAAK,aAAa,OAAO,CAACC,EAAI,CAACC,CAAE,CACpC,CACD,MAAO,EACV,CACD,YAAa,CACT,KAAK,eAAe,IAAM,OAAA,OAAAN,EAAA,KAAK,eAAL,YAAAA,EAAmB,aAAY,CAC5D,CACD,aAAc,CACV,KAAK,eAAe,IAAM,OAAA,OAAAA,EAAA,KAAK,eAAL,YAAAA,EAAmB,cAAa,CAC7D,CACD,MAAO,CACC,KAAK,cAAgB,KAAK,aAAa,UACvC,KAAK,aAAa,WAGlB,KAAK,eAAc,CAE1B,CACD,YAAa,OACT,OAAOA,EAAA,KAAK,eAAL,YAAAA,EAAmB,SAC7B,CACD,UAAW,CACP,OAAO,KAAK,KAAK,IAAKhC,GAAQA,EAAI,KAAK,EAAE,CAAC,EAAE,KAAK;AAAA,CAAI,EAAI;AAAA,CAC5D,CACL,CCpFO,MAAMuC,CAAc,CAwBvB,YAAYC,EAAQ,EAAGC,EAAQ,EAAGC,EAAoB,EAAG,CAvBzDnD,EAAA,cACAA,EAAA,cACAA,EAAA,0BAsBI,KAAK,MAAQiD,EACb,KAAK,MAAQC,EACb,KAAK,kBAAoBC,CAC5B,CAxBD,aAAaC,EAAW,CACpB,OAAQA,EAAS,CACb,IAAK,GACD,KAAK,OAAS,IAAM,KAAK,MAAQ,GACjC,MACJ,IAAK,GACD,KAAK,OAAS,KAAO,KAAK,MAAQ,GAClC,MACJ,IAAK,GACD,KAAK,OAAS,KAAO,KAAK,MAAQ,GAClC,MACJ,IAAK,GACD,KAAK,OAAS,MAAQ,KAAK,MAAQ,GACnC,MACJ,QACI,QAAQ,MAAM,0BAA0BA,CAAS,EAAE,CAC1D,CACD,KAAK,mBAAqBA,EAC1B,KAAK,MAAQ,KAAK,IAAI,GAAI,KAAK,MAAM,KAAK,kBAAoB,EAAE,CAAC,CACpE,CAML,CC7BO,MAAMC,CAAW,CAIpB,YAAYC,EAAO,CAHnBtD,EAAA,cACAA,EAAA,mBACAA,EAAA,cAEI,KAAK,MAAQ,CAAC,GAAGsD,CAAK,EACtB,KAAK,WAAa,GAClB,KAAK,MAAQ,CAChB,CACD,SAAU,CACN,KAAK,WAAa,CAAC,GAAG,KAAK,KAAK,EAChC,QAASC,EAAI,KAAK,WAAW,OAAS,EAAGA,EAAI,EAAGA,IAAK,CACjD,MAAMC,EAAI,KAAK,MAAM,KAAK,UAAYD,EAAI,EAAE,EAC5C,CAAC,KAAK,WAAWA,CAAC,EAAG,KAAK,WAAWC,CAAC,CAAC,EAAI,CAAC,KAAK,WAAWA,CAAC,EAAG,KAAK,WAAWD,CAAC,CAAC,CACrF,CACD,KAAK,MAAQ,CAChB,CACD,MAAO,CACH,OAAI,KAAK,OAAS,KAAK,WAAW,QAC9B,KAAK,QAAO,EAET,KAAK,WAAW,KAAK,OAAO,CACtC,CACL,CChBA,MAAME,CAAK,CAUT,YAAYC,EAAU,GAAIC,EAAO,GAAIC,EAAe,IAAM,CAT1D5D,EAAA,gBACAA,EAAA,aACAA,EAAA,qBACAA,EAAA,iBAEAA,EAAA,cACAA,EAAA,gBACAA,EAAA,oBAGE,KAAK,QAAU0D,EACf,KAAK,KAAOC,EACZ,KAAK,aAAeC,EACpB,KAAK,SAAW,EAEX,KAAA,QAAU,IAAIZ,EACnB,KAAK,MAAQ,IAAIZ,EAAM,KAAK,QAAS,KAAK,IAAI,EACzC,KAAA,YAAc,IAAIiB,EAAW,CAChCxD,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,OAAA,CACX,EAEI,KAAA,MAAM,YAAeuD,GAAc,CACjC,KAAA,QAAQ,aAAaA,CAAS,CAAA,CAEvC,CACF,CAEA,SAASS,GAAW,CACZ,MAAAC,EAAS,SAAS,eAAe,MAAM,EAEvCC,EAAO,IAAIN,EAEZM,EAAA,QAAU,IAAIf,EACnBe,EAAK,MAAQ,IAAI3B,EAAM2B,EAAK,QAASA,EAAK,IAAI,EACzCA,EAAA,MAAM,YAAeX,GAAc,QACjCX,EAAAsB,EAAA,UAAA,MAAAtB,EAAS,aAAaW,EAAS,EAEjCW,EAAA,YAAc,IAAIV,EAAW,CAChCxD,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,QACVA,EAAU,OAAA,CACX,EAEQ,SAAA,iBAAiB,UAAYmE,GAAU,CAC1C,GAAAA,EAAM,OAAS,QACjB,QAAS,EAAI,EAAG,EAAID,EAAK,KAAM,IAC7BA,EAAK,MAAM,mBAEJC,EAAM,MAAQ,IACvBD,EAAK,MAAM,qBACFC,EAAM,MAAQ,IACvBD,EAAK,MAAM,sBACFC,EAAM,OAAS,UACxBD,EAAK,MAAM,sBACFC,EAAM,OAAS,YACxBD,EAAK,MAAM,mBACFC,EAAM,OAAS,YACxBD,EAAK,MAAM,mBACFC,EAAM,OAAS,aACxBD,EAAK,MAAM,gBAEX,QAEFC,EAAM,eAAe,CAAA,CACtB,EAEK,MAAAC,EAAUC,GAAsB,CACpCC,EAAaJ,EAAMG,CAAS,EACjBE,EAAAL,EAAMD,CAAiB,EAClC,OAAO,sBAAsBG,CAAM,CAAA,EAErC,OAAO,sBAAsBA,CAAM,CACrC,CAIA,SAASE,EAAaJ,EAAYG,EAAmB,CAC/CA,GAAaH,EAAK,WACpBM,EAAKN,CAAI,EACTO,EAAiBP,CAAI,EAChBA,EAAA,SAAWG,EAAYH,EAAK,aAErC,CAEA,SAASM,EAAKN,EAAY,CACnBA,EAAK,MAAM,aAGdA,EAAK,MAAM,OAFXA,EAAK,MAAM,KAAKA,EAAK,YAAY,MAAM,CAI3C,CAEA,SAASO,EAAiBP,EAAY,CACpC,MAAMH,EAAeW,EAAwBR,EAAK,QAAQ,KAAK,EAC3DH,IACFG,EAAK,aAAeH,EAExB,CAEA,MAAMW,EAAuD,CAC3D,EAAG,GAAK,GACR,EAAG,GAAK,GACR,EAAG,GAAK,GACR,EAAG,GAAK,EACR,EAAG,GAAK,EACR,EAAG,GAAK,EACR,EAAG,GAAK,EACR,EAAG,GAAK,EACR,EAAG,GAAK,EACR,GAAI,EACN,EAIA,SAASH,EAAWL,EAAYD,EAA2BI,EAAmB,CACtE,MAAAM,EAAMV,EAAO,WAAW,IAAI,EAClC,GAAI,CAACU,EAAK,CACR,QAAQ,MAAM,QAAQ,EACtB,MACF,CACM,MAAAC,EAAeX,EAAO,MAAQA,EAAO,YACrCY,EAAgBZ,EAAO,OAASA,EAAO,aACvCa,EAAYF,EAAcV,EAAK,QAC/Ba,EAAaF,EAAeX,EAAK,KAExBc,EAAAL,EAAKC,EAAaC,CAAY,EAC7C,QAASjE,EAAM,EAAGA,EAAMsD,EAAK,KAAMtD,IACjC,QAAS8B,EAAS,EAAGA,EAASwB,EAAK,QAASxB,IAAU,CACpD,MAAMK,EAAOmB,EAAK,MAAM,OAAOtD,EAAK8B,CAAM,EAC1CuC,EAASN,EAAK,CAAE,KAAA5B,EAAM,IAAAnC,EAAK,OAAA8B,EAAQ,UAAAoC,EAAW,WAAAC,EAAY,CAC5D,CAEFG,EAAYP,EAAK,CACf,MAAOT,EAAK,QAAQ,MACpB,MAAOA,EAAK,QAAQ,MACpB,YAAAU,CAAA,CACD,CACH,CAEA,SAASI,EAAeL,EAA+BC,EAAqBC,EAAsB,CAChGF,EAAI,UAAY,UAChBA,EAAI,SAAS,EAAG,EAAGC,EAAaC,CAAY,CAC9C,CAEA,SAASI,EACPN,EACA,CACE,KAAA5B,EACA,IAAAnC,EACA,OAAA8B,EACA,UAAAoC,EACA,WAAAC,CACF,EACA,CACIJ,EAAA,UAAYQ,EAAYpC,CAAI,EAChC,MAAMtB,EAAIqD,EAAYpC,EAChBlB,EAAIuD,EAAanE,EACvB+D,EAAI,SAASlD,EAAGD,EAAGsD,EAAWC,CAAU,CAC1C,CAEA,MAAMI,EAAyC,CAC7C,IAAK,UACL,EAAG,UACH,EAAG,UACH,EAAG,UACH,EAAG,UACH,EAAG,UACH,EAAG,UACH,EAAG,SACL,EAEA,SAASD,EACPP,EACA,CAAE,MAAAvB,EAAO,MAAAC,EAAO,YAAAuB,GAChB,CAGAQ,EAAST,EAAK,CACZ,KAAM,SAAStB,CAAK,GACpB,EAAG,EACH,EAAG,GACH,KAAM,iBAAW,CAClB,EACD+B,EAAST,EAAK,CACZ,KAAM,SAASvB,CAAK,GACpB,UAAW,QACX,EAAGwB,EAAc,EACjB,EAAG,GACH,KAAM,iBAAW,CAClB,CACH,CAEA,SAASQ,EACPT,EACA,CAAE,KAAAU,EAAM,EAAA5D,EAAG,EAAAD,EAAG,KAAA8D,EAAM,UAAAC,GACpB,CACAZ,EAAI,KAAOW,EACXX,EAAI,UAAYY,GAAa,OAC7BZ,EAAI,UAAY,UACZA,EAAA,SAASU,EAAM5D,EAAGD,CAAC,CACzB,CAEAwC,EAAS"}